<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classrealValued" kind="class" language="C++" prot="public">
    <compoundname>realValued</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classrealValued_1a25156f9aa917743745f9bed2af030d46" prot="public" static="no" mutable="no">
        <type>vector&lt; vector&lt; double &gt; &gt;</type>
        <definition>vector&lt;vector&lt;double&gt; &gt; realValued::Matrix</definition>
        <argsstring></argsstring>
        <name>Matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="10" column="8" bodyfile="matrix/basic_functions.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrealValued_1a80a224cc5db83712241c8c8ba76db29c" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t realValued::rows</definition>
        <argsstring></argsstring>
        <name>rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="11" column="8" bodyfile="matrix/basic_functions.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrealValued_1acfe468b843b4ee0b9a64eb42143a2345" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t realValued::columns</definition>
        <argsstring></argsstring>
        <name>columns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="12" column="8" bodyfile="matrix/basic_functions.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrealValued_1af58afdc8e4801feec177813272cad084" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool realValued::compare</definition>
        <argsstring>(realValued matrix)</argsstring>
        <name>compare</name>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref></type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="14" column="6" bodyfile="matrix/basic_functions.h" bodystart="14" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1ac03593977dcec33bbddd7d95ff2425f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void realValued::print_matrix</definition>
        <argsstring>()</argsstring>
        <name>print_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="33" column="6" bodyfile="matrix/basic_functions.h" bodystart="33" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a650bc67341171136ab20ac5f08d585f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool realValued::correct_size_for_multiplication</definition>
        <argsstring>(const realValued matrix)</argsstring>
        <name>correct_size_for_multiplication</name>
        <param>
          <type>const <ref refid="classrealValued" kindref="compound">realValued</ref></type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="46" column="6" bodyfile="matrix/basic_functions.h" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1ae6fba0567a1d9712e41d127acc0885b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool realValued::correct_sizes</definition>
        <argsstring>(const realValued matrix)</argsstring>
        <name>correct_sizes</name>
        <param>
          <type>const <ref refid="classrealValued" kindref="compound">realValued</ref></type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="56" column="6" bodyfile="matrix/basic_functions.h" bodystart="56" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a6a033fcb2636a9a82ae3cb61fd87745a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrealValued" kindref="compound">realValued</ref></type>
        <definition>realValued realValued::multiplication</definition>
        <argsstring>(const realValued matrix)</argsstring>
        <name>multiplication</name>
        <param>
          <type>const <ref refid="classrealValued" kindref="compound">realValued</ref></type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="65" column="12" bodyfile="matrix/basic_functions.h" bodystart="65" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a64ff4a0416a7c02ecadc2ac70fa84b9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrealValued" kindref="compound">realValued</ref></type>
        <definition>realValued realValued::addition</definition>
        <argsstring>(realValued matrix)</argsstring>
        <name>addition</name>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref></type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="88" column="12" bodyfile="matrix/basic_functions.h" bodystart="88" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a0ffc4a52eb869177622c85a1ae25ebfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrealValued" kindref="compound">realValued</ref></type>
        <definition>realValued realValued::subtraction</definition>
        <argsstring>(realValued matrix)</argsstring>
        <name>subtraction</name>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref></type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="104" column="12" bodyfile="matrix/basic_functions.h" bodystart="104" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a8bfecd95a399740158f6cc93d1ebe0e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void realValued::expand</definition>
        <argsstring>(const size_t &amp;size)</argsstring>
        <name>expand</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="120" column="6" bodyfile="matrix/basic_functions.h" bodystart="120" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1ad32810d483fd363719bcd12731cf835a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>realValued::realValued</definition>
        <argsstring>()=default</argsstring>
        <name>realValued</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a8e0e3aeaa3b0d2c9736940480a2d9153" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>realValued::realValued</definition>
        <argsstring>(const int &amp;n)</argsstring>
        <name>realValued</name>
        <param>
          <type>const int &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="133" column="1" bodyfile="matrix/basic_functions.h" bodystart="133" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a835ec746f0df776fe0c2a34a21d63183" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>realValued::realValued</definition>
        <argsstring>(vector&lt; vector&lt; double &gt;&gt; matrix)</argsstring>
        <name>realValued</name>
        <param>
          <type>vector&lt; vector&lt; double &gt;&gt;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="146" column="1" bodyfile="matrix/basic_functions.h" bodystart="146" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a5c42029d3136c989b22e06647807321b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>realValued::realValued</definition>
        <argsstring>(const size_t &amp;N, const size_t &amp;M, bool randInit=false)</argsstring>
        <name>realValued</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>randInit</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="153" column="1" bodyfile="matrix/basic_functions.h" bodystart="153" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1ad8a193a19c754533b609a3bae09af02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void realValued::split</definition>
        <argsstring>(realValued &amp;a1, realValued &amp;a2, realValued &amp;a3, realValued &amp;a4)</argsstring>
        <name>split</name>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>a2</declname>
        </param>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>a3</declname>
        </param>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>a4</declname>
        </param>
        <briefdescription>
<para>Splits a real-valued matrix into four submatrices. </para>
        </briefdescription>
        <detaileddescription>
<para>This method takes a real-valued matrix and splits it into four submatrices, each of size n/2 x n/2, where n is the size of the original matrix. The submatrices are stored in the passed parameters a1, a2, a3, and a4, respectively. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first submatrix to store</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second submatrix to store </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third submatrix to store </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a4</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth submatrix to store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="175" column="6" bodyfile="matrix/Strassen/Strassen.h" bodystart="20" bodyend="35"/>
        <referencedby refid="classrealValued_1ae8b3cc8045c8b37e7a1ab35aa41d820b" compoundref="Strassen_8h" startline="86" endline="112">Strassens_algorithm</referencedby>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1acafd4dc238e53879fbccf35d25e0176e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void realValued::collect</definition>
        <argsstring>(realValued &amp;c11, realValued &amp;c12, realValued &amp;c21, realValued &amp;c22)</argsstring>
        <name>collect</name>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>c11</declname>
        </param>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>c12</declname>
        </param>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>c21</declname>
        </param>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>c22</declname>
        </param>
        <briefdescription>
<para>Collects 4 submatrices to form a larger matrix. This method takes four <ref refid="classrealValued" kindref="compound">realValued</ref> matrices (c11, c12, c21, c22) as input and combines them to form a larger matrix, with c11 in the top-left quadrant, c12 in the top-right quadrant, c21 in the bottom-left quadrant, and c22 in the bottom-right quadrant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c11</parametername>
</parameternamelist>
<parameterdescription>
<para>The top-left quadrant matrix to be combined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c12</parametername>
</parameternamelist>
<parameterdescription>
<para>The top-right quadrant matrix to be combined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c21</parametername>
</parameternamelist>
<parameterdescription>
<para>The bottom-left quadrant matrix to be combined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c22</parametername>
</parameternamelist>
<parameterdescription>
<para>The bottom-right quadrant matrix to be combined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: void, as the method modifies the calling <ref refid="classrealValued" kindref="compound">realValued</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="176" column="6" bodyfile="matrix/Strassen/Strassen.h" bodystart="50" bodyend="60"/>
        <referencedby refid="classrealValued_1ae8b3cc8045c8b37e7a1ab35aa41d820b" compoundref="Strassen_8h" startline="86" endline="112">Strassens_algorithm</referencedby>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1ae8b3cc8045c8b37e7a1ab35aa41d820b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrealValued" kindref="compound">realValued</ref></type>
        <definition>realValued realValued::Strassens_algorithm</definition>
        <argsstring>(realValued matrix, size_t n)</argsstring>
        <name>Strassens_algorithm</name>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref></type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Implements Strassen&apos;s algorithm for multiplying two real-valued matrices. This function uses Strassen&apos;s algorithm to compute the product of two real-valued matrices of size n x n. If n is smaller than or equal to 64, the function uses standard matrix multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>The real-valued matrix to be multiplied with the current object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the matrices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: The product of the two matrices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="177" column="12" bodyfile="matrix/Strassen/Strassen.h" bodystart="86" bodyend="112"/>
        <references refid="classrealValued_1acafd4dc238e53879fbccf35d25e0176e" compoundref="Strassen_8h" startline="50" endline="60">collect</references>
        <references refid="classrealValued_1ad8a193a19c754533b609a3bae09af02e" compoundref="Strassen_8h" startline="20" endline="35">split</references>
        <references refid="classrealValued_1ae8b3cc8045c8b37e7a1ab35aa41d820b" compoundref="Strassen_8h" startline="86" endline="112">Strassens_algorithm</references>
        <referencedby refid="classrealValued_1ae8b3cc8045c8b37e7a1ab35aa41d820b" compoundref="Strassen_8h" startline="86" endline="112">Strassens_algorithm</referencedby>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a689a8f76b905b2a137b41ad7d52f4a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrealValued" kindref="compound">realValued</ref></type>
        <definition>realValued realValued::Strassen_multiplication</definition>
        <argsstring>(realValued matrix)</argsstring>
        <name>Strassen_multiplication</name>
        <param>
          <type><ref refid="classrealValued" kindref="compound">realValued</ref></type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Performs matrix multiplication using the Strassen algorithm. This function performs matrix multiplication using the Strassen algorithm, which is an algorithm for computing the product of two matrices. If the size of matrices is less than or equal to 64, it performs the regular multiplication. If the size is greater than 64, it expands the matrices to the nearest power of 2, and then applies the Strassen algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to be multiplied with the calling object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: The resulting matrix obtained after multiplication using Strassen algorithm </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrices are not of correct size for multiplication </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="178" column="12" bodyfile="matrix/Strassen/Strassen.h" bodystart="125" bodyend="157"/>
        <referencedby refid="classNewtonINversion_1aded351e9e58ff675ce8ad7d6795182dd" compoundref="newton_8cpp" startline="41" endline="57">NewtonINversion::inverse</referencedby>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a33513294526ab1e250aed64a01cd55a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto realValued::test_time</definition>
        <argsstring>(const realValued &amp;matrix)</argsstring>
        <name>test_time</name>
        <param>
          <type>const <ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="179" column="6" bodyfile="matrix/Strassen/test_for_Strassen.h" bodystart="13" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a0c52bc84ffa3aaae79eb36f513543860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto realValued::test_time_Strassen</definition>
        <argsstring>(const realValued &amp;matrix)</argsstring>
        <name>test_time_Strassen</name>
        <param>
          <type>const <ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="180" column="6" bodyfile="matrix/Strassen/test_for_Strassen.h" bodystart="23" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classrealValued_1a5e51bd5e1677aa6751a7f621a6d5223d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void realValued::test</definition>
        <argsstring>(const realValued &amp;matrix)</argsstring>
        <name>test</name>
        <param>
          <type>const <ref refid="classrealValued" kindref="compound">realValued</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="matrix/basic_functions.h" line="181" column="6" bodyfile="matrix/Strassen/test_for_Strassen.h" bodystart="33" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="matrix/basic_functions.h" line="7" column="1" bodyfile="matrix/basic_functions.h" bodystart="8" bodyend="182"/>
    <listofallmembers>
      <member refid="classrealValued_1a64ff4a0416a7c02ecadc2ac70fa84b9e" prot="public" virt="non-virtual"><scope>realValued</scope><name>addition</name></member>
      <member refid="classrealValued_1acafd4dc238e53879fbccf35d25e0176e" prot="public" virt="non-virtual"><scope>realValued</scope><name>collect</name></member>
      <member refid="classrealValued_1acfe468b843b4ee0b9a64eb42143a2345" prot="public" virt="non-virtual"><scope>realValued</scope><name>columns</name></member>
      <member refid="classrealValued_1af58afdc8e4801feec177813272cad084" prot="public" virt="non-virtual"><scope>realValued</scope><name>compare</name></member>
      <member refid="classrealValued_1a650bc67341171136ab20ac5f08d585f5" prot="public" virt="non-virtual"><scope>realValued</scope><name>correct_size_for_multiplication</name></member>
      <member refid="classrealValued_1ae6fba0567a1d9712e41d127acc0885b2" prot="public" virt="non-virtual"><scope>realValued</scope><name>correct_sizes</name></member>
      <member refid="classrealValued_1a8bfecd95a399740158f6cc93d1ebe0e5" prot="public" virt="non-virtual"><scope>realValued</scope><name>expand</name></member>
      <member refid="classrealValued_1a25156f9aa917743745f9bed2af030d46" prot="public" virt="non-virtual"><scope>realValued</scope><name>Matrix</name></member>
      <member refid="classrealValued_1a6a033fcb2636a9a82ae3cb61fd87745a" prot="public" virt="non-virtual"><scope>realValued</scope><name>multiplication</name></member>
      <member refid="classrealValued_1ac03593977dcec33bbddd7d95ff2425f7" prot="public" virt="non-virtual"><scope>realValued</scope><name>print_matrix</name></member>
      <member refid="classrealValued_1ad32810d483fd363719bcd12731cf835a" prot="public" virt="non-virtual"><scope>realValued</scope><name>realValued</name></member>
      <member refid="classrealValued_1a8e0e3aeaa3b0d2c9736940480a2d9153" prot="public" virt="non-virtual"><scope>realValued</scope><name>realValued</name></member>
      <member refid="classrealValued_1a835ec746f0df776fe0c2a34a21d63183" prot="public" virt="non-virtual"><scope>realValued</scope><name>realValued</name></member>
      <member refid="classrealValued_1a5c42029d3136c989b22e06647807321b" prot="public" virt="non-virtual"><scope>realValued</scope><name>realValued</name></member>
      <member refid="classrealValued_1a80a224cc5db83712241c8c8ba76db29c" prot="public" virt="non-virtual"><scope>realValued</scope><name>rows</name></member>
      <member refid="classrealValued_1ad8a193a19c754533b609a3bae09af02e" prot="public" virt="non-virtual"><scope>realValued</scope><name>split</name></member>
      <member refid="classrealValued_1a689a8f76b905b2a137b41ad7d52f4a90" prot="public" virt="non-virtual"><scope>realValued</scope><name>Strassen_multiplication</name></member>
      <member refid="classrealValued_1ae8b3cc8045c8b37e7a1ab35aa41d820b" prot="public" virt="non-virtual"><scope>realValued</scope><name>Strassens_algorithm</name></member>
      <member refid="classrealValued_1a0ffc4a52eb869177622c85a1ae25ebfd" prot="public" virt="non-virtual"><scope>realValued</scope><name>subtraction</name></member>
      <member refid="classrealValued_1a5e51bd5e1677aa6751a7f621a6d5223d" prot="public" virt="non-virtual"><scope>realValued</scope><name>test</name></member>
      <member refid="classrealValued_1a33513294526ab1e250aed64a01cd55a6" prot="public" virt="non-virtual"><scope>realValued</scope><name>test_time</name></member>
      <member refid="classrealValued_1a0c52bc84ffa3aaae79eb36f513543860" prot="public" virt="non-virtual"><scope>realValued</scope><name>test_time_Strassen</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
